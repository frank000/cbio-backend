name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  GH_KEY: ${{ secrets.GH_KEY }}


jobs:
  build:

    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: FIRST show  environment variables
        env:
          GH_KEY_AUTHS: ${{ secrets.GH_KEY_AUTH }}
        run: |
          echo "SHOW ]]  : $GH_KEY_AUTHS"

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Update db url
        run: sed -i 's/<api_key_openia>/${{ secrets.IA_KEY }}/' src/main/resources/application-prd.properties


      #      - name: Update MINIO_PASSWORD
      #        run: sed -i 's/<minio_password>/${{ secrets.MINIO_PASSWORD }}/' src/main/resources/application-prd.properties

      - name: Update CLIENT_SECRET
        run: sed -i 's/<client_secret>/${{ secrets.CLIENT_SECRET }}/' src/main/resources/application-prd.properties
        env:
          CLIENT_ID: ${{ vars.CLIENT_ID }}
          MINIO_USER: ${{ vars.MINIO_USER }}




      - name: Set environment variables
        run: |
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "GH_KEY_AUTH=${{ secrets.GH_KEY_AUTH }}" >> $GITHUB_ENV
          echo "GH_KEY=${{ secrets.GH_KEY }}" >> $GITHUB_ENV 
          echo "IA_KEY=${{ secrets.IA_KEY }}" >> $GITHUB_ENV 
          echo "MINIO_PASSWORD=${{ secrets.MINIO_PASSWORD }}" >> $GITHUB_ENV
          echo "TAG=${{ github.ref }}" | sed 's|refs/heads/||' >> $GITHUB_ENV

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: '[{"id": "central", "url": "https://repo1.maven.org/maven2" }, {"id": "github", "url": "https://maven.pkg.github.com/frank000/cbio-jrasa", "snapshots":{"enabled":true } }]'
          active_profiles: >
            [
              "github"
            ]
          servers: >
            [
              {
                "id": "github",
                "username": "frank000",
                "password": "${env.GH_KEY}"
              },
              {
                  "id": "github-repo",
                  "configuration": {
                    "httpHeaders": {
                      "property": {
                        "name": "Authorization",
                        "value": "${env.GH_KEY_AUTH}" 
                      }
                    }
                  }
                }
            ]


      - name: show Settings
        run: cat /home/runner/.m2/settings.xml


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/com/your/project
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GH_KEY_AUTH=${{ secrets.GH_KEY_AUTH }}
            GH_KEY=${{ secrets.GH_KEY }}
            PROFILE=prd

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}


      # Etapa para rodar o docker-compose no servidor remoto
      - name: Deploy with Docker Compose on remote server
        if: ${{ github.event_name != 'pull_request' }}
        uses: appleboy/ssh-action@v0.1.6
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          IMAGE_BACKEND: ${{ steps.meta.outputs.tags }}
          IA_KEY: ${{ secrets.IA_KEY }}
        with:
          host: '84.247.179.83'
          username: 'root'
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22  # Porta SSH, adicione explicitamente
          timeout: 600s  # Tempo de espera maior, 600 segundos (10 minutos)
          script: |
            cd /root/applications/cbio/backend
            echo "Image backend: $IMAGE_BACKEND"  
            export IMAGE_BACKEND=${{ steps.meta.outputs.tags }}                
            if [ -z "$IMAGE_BACKEND" ]; then
              echo "ERROR: IMAGE_BACKEND is empty!"
              exit 1
            fi
            
            sed -i "0,/image: .*/s|image: .*|image: $IMAGE_BACKEND|" docker-compose-swarm.yml

            
            docker stack deploy -c docker-compose-swarm.yml backend-app